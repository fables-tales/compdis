#!/usr/bin/env python
import redis

match_length = 60*7 
STATE_ENTER = "enter" 
STATE_BOOT  = "boot" 
STATE_LIVE  = "live" 
STATE_SCORE = "scoring" 
import time
import json


r = redis.Redis(host='localhost', port=6379, db=0)

def get_next_match():
    global r;
    len = r.llen("org.srobo.matches") 
    comptime = float(r.get("org.srobo.time.competition"))
    for i in xrange(0, len):
        v = r.lindex("org.srobo.matches", i)
        match = match_from_ms(v)

        if match["time"] > comptime and match["time"] < comptime + match_length:
            return i 

    return -1 

def get_current_match():
    global r;
    len = r.llen("org.srobo.matches") 
    comptime = float(r.get("org.srobo.time.competition"))
    for i in xrange(0, len):
        v = r.lindex("org.srobo.matches", i)
        match = match_from_ms(v)
        upper = match["time"] + match_length
        lower = match["time"]
        if comptime > lower and comptime < upper:
            return i 
    return -1

def get_current_state():
    global r
    x = get_current_match()
    current_match = r.lindex("org.srobo.matches", x)
    current_match = match_from_ms(current_match)
    comptime = float(r.get("org.srobo.time.competition"))
    into_match = comptime-current_match["time"]
    minute = into_match/60
    if minute >= 0 and minute <= 1:
        return STATE_ENTER
    elif minute > 1 and minute <= 2:
        return STATE_BOOT
    elif minute > 2 and minute <= 5:
        return STATE_LIVE
    elif minute > 5 and minute <= 7:
        return STATE_SCORE
    else:
        return None

    
def match_from_ms(ms):
    return json.loads(ms)

def match_to_ms(match):
    return json.dumps(match)

if __name__ == "__main__":
    ps = r.pubsub()
    ps.psubscribe("org.srobo.time.competition") 
    lg = ps.listen()
    for message in lg:
        ctime = r.get("org.srobo.time.competition")
        print ctime
        print get_current_match()
        print get_next_match()
        print get_current_state()
        if get_current_match() is not None:
            r.set("org.srobo.matches.current", get_current_match())
        r.set("org.srobo.matches.next", get_next_match())
        r.set("org.srobo.matches.state", get_current_state())
